{"ast":null,"code":"/*\n json-stringify-safe\n Like JSON.stringify, but doesn't throw on circular references.\n\n Originally forked from https://github.com/isaacs/json-stringify-safe\n version 5.0.1 on 3/8/2017 and modified to handle Errors serialization\n and IE8 compatibility. Tests for this are in test/vendor.\n\n ISC license: https://github.com/isaacs/json-stringify-safe/blob/master/LICENSE\n*/\nexports = module.exports = stringify;\nexports.getSerialize = serializer;\n\nfunction indexOf(haystack, needle) {\n  for (var i = 0; i < haystack.length; ++i) {\n    if (haystack[i] === needle) return i;\n  }\n\n  return -1;\n}\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);\n} // https://github.com/ftlabs/js-abbreviate/blob/fa709e5f139e7770a71827b1893f22418097fbda/index.js#L95-L106\n\n\nfunction stringifyError(value) {\n  var err = {\n    // These properties are implemented as magical getters and don't show up in for in\n    stack: value.stack,\n    message: value.message,\n    name: value.name\n  };\n\n  for (var i in value) {\n    if (Object.prototype.hasOwnProperty.call(value, i)) {\n      err[i] = value[i];\n    }\n  }\n\n  return err;\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [];\n  var keys = [];\n\n  if (cycleReplacer == null) {\n    cycleReplacer = function (key, value) {\n      if (stack[0] === value) {\n        return '[Circular ~]';\n      }\n\n      return '[Circular ~.' + keys.slice(0, indexOf(stack, value)).join('.') + ']';\n    };\n  }\n\n  return function (key, value) {\n    if (stack.length > 0) {\n      var thisPos = indexOf(stack, this);\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n\n      if (~indexOf(stack, value)) {\n        value = cycleReplacer.call(this, key, value);\n      }\n    } else {\n      stack.push(value);\n    }\n\n    return replacer == null ? value instanceof Error ? stringifyError(value) : value : replacer.call(this, key, value);\n  };\n}","map":{"version":3,"sources":["/Users/melikekilic/vidly/node_modules/raven-js/vendor/json-stringify-safe/stringify.js"],"names":["exports","module","stringify","getSerialize","serializer","indexOf","haystack","needle","i","length","obj","replacer","spaces","cycleReplacer","JSON","stringifyError","value","err","stack","message","name","Object","prototype","hasOwnProperty","call","keys","key","slice","join","thisPos","splice","push","Infinity","Error"],"mappings":"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","sourcesContent":["/*\n json-stringify-safe\n Like JSON.stringify, but doesn't throw on circular references.\n\n Originally forked from https://github.com/isaacs/json-stringify-safe\n version 5.0.1 on 3/8/2017 and modified to handle Errors serialization\n and IE8 compatibility. Tests for this are in test/vendor.\n\n ISC license: https://github.com/isaacs/json-stringify-safe/blob/master/LICENSE\n*/\n\nexports = module.exports = stringify;\nexports.getSerialize = serializer;\n\nfunction indexOf(haystack, needle) {\n  for (var i = 0; i < haystack.length; ++i) {\n    if (haystack[i] === needle) return i;\n  }\n  return -1;\n}\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);\n}\n\n// https://github.com/ftlabs/js-abbreviate/blob/fa709e5f139e7770a71827b1893f22418097fbda/index.js#L95-L106\nfunction stringifyError(value) {\n  var err = {\n    // These properties are implemented as magical getters and don't show up in for in\n    stack: value.stack,\n    message: value.message,\n    name: value.name\n  };\n\n  for (var i in value) {\n    if (Object.prototype.hasOwnProperty.call(value, i)) {\n      err[i] = value[i];\n    }\n  }\n\n  return err;\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [];\n  var keys = [];\n\n  if (cycleReplacer == null) {\n    cycleReplacer = function(key, value) {\n      if (stack[0] === value) {\n        return '[Circular ~]';\n      }\n      return '[Circular ~.' + keys.slice(0, indexOf(stack, value)).join('.') + ']';\n    };\n  }\n\n  return function(key, value) {\n    if (stack.length > 0) {\n      var thisPos = indexOf(stack, this);\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n\n      if (~indexOf(stack, value)) {\n        value = cycleReplacer.call(this, key, value);\n      }\n    } else {\n      stack.push(value);\n    }\n\n    return replacer == null\n      ? value instanceof Error ? stringifyError(value) : value\n      : replacer.call(this, key, value);\n  };\n}\n"]},"metadata":{},"sourceType":"script"}