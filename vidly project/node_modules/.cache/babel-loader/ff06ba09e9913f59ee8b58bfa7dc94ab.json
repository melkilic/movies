{"ast":null,"code":"var _jsxFileName = \"/Users/melikekilic/vidly/src/components/movies.jsx\";\n\n/** @format */\nimport React, { Component } from \"react\";\nimport { getMovies } from \"../components/services/fakeMovieService\";\nimport { render } from \"@testing-library/react\";\nimport MoviesTable from \"./moviesTable\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utils/paginate\";\nimport ListGroup from \"./common/listGroup\";\nimport { getGenres } from \"./services/fakeGenreService\";\nimport _ from \"lodash\";\n\nclass Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      pageSize: 4,\n      currentPage: 1,\n      genres: [],\n      searchQuery: \"\",\n      selectedGenre: null,\n      sortColumn: {\n        path: \"title\",\n        order: \"asc\"\n      }\n    };\n\n    this.handleDelete = movie => {\n      const movies = this.state.movies.filter(mov => mov._id !== movie._id); //simply pass movies because the key and the value are the same\n\n      this.setState({\n        movies\n      });\n    };\n\n    this.handleLike = movie => {\n      const movies = [...this.state.movies];\n      const index = movies.indexOf(movie);\n      movies[index].liked = !movies[index].liked;\n      this.setState({\n        movies\n      });\n    };\n\n    this.handlePageChange = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n\n    this.handleGenreSelect = genre => {\n      this.setState({\n        selectedGenre: genre,\n        searchQuery: \"\",\n        currentPage: 1\n      });\n    };\n\n    this.handleSort = sortColumn => {\n      this.setState({\n        sortColumn\n      });\n    };\n\n    this.handleSearch = query => {\n      this.setState({\n        searchQuery: query,\n        selectedGenre: null,\n        currentPage: 1\n      });\n    };\n\n    this.getPagedData = () => {\n      const {\n        pageSize,\n        currentPage,\n        selectedGenre,\n        movies: allMovies,\n        sortColumn\n      } = this.state;\n      const filtered = allMovies;\n      if (searchQuery) filtere = allMovies.filter(m => m.title.toLowerCase().startsWith(searchQuery.toLowerCase()));else if (selectedGenre && selectedGenre._id) filtered = allMovies.filter(m => m.genre._id === selectedGenre._id);\n\n      const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n      const movies = paginate(sorted, currentPage, pageSize);\n      return {\n        totalCount: filtered.length,\n        data: movies\n      };\n    };\n  }\n\n  componentDidMount() {\n    const genres = [{\n      _id: \"\",\n      name: \"All genres\"\n    }, ...getGenres()];\n    this.setState({\n      movies: getMovies(),\n      genres\n    });\n  }\n\n  render() {\n    const {\n      length: count\n    } = this.state.movies;\n    const {\n      pageSize,\n      currentPage,\n      sortColumn\n    } = this.state;\n    if (count === 0) return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, \"There are no movies in the database.\");\n    const {\n      totalCount,\n      data: movies\n    } = this.getPagedData();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ListGroup, {\n      items: this.state.genres,\n      onItemSelect: this.handleGenreSelect,\n      selectedItem: this.state.selectedGenre,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, \" Showing \", totalCount, \" movies in the database.\"), /*#__PURE__*/React.createElement(MoviesTable, {\n      movies: movies,\n      sortColumn: sortColumn,\n      onLike: this.handleLike,\n      onDelete: this.handleDelete,\n      onSort: this.handleSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Pagination, {\n      itemsCount: totalCount,\n      pageSize: pageSize,\n      currentPage: currentPage,\n      onPageChange: this.handlePageChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Movies;","map":{"version":3,"sources":["/Users/melikekilic/vidly/src/components/movies.jsx"],"names":["React","Component","getMovies","render","MoviesTable","Pagination","paginate","ListGroup","getGenres","_","Movies","state","movies","pageSize","currentPage","genres","searchQuery","selectedGenre","sortColumn","path","order","handleDelete","movie","filter","mov","_id","setState","handleLike","index","indexOf","liked","handlePageChange","page","handleGenreSelect","genre","handleSort","handleSearch","query","getPagedData","allMovies","filtered","filtere","m","title","toLowerCase","startsWith","sorted","orderBy","totalCount","length","data","componentDidMount","name","count"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { Component } from \"react\";\nimport { getMovies } from \"../components/services/fakeMovieService\";\nimport { render } from \"@testing-library/react\";\nimport MoviesTable from \"./moviesTable\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utils/paginate\";\nimport ListGroup from \"./common/listGroup\";\nimport { getGenres } from \"./services/fakeGenreService\";\nimport _ from \"lodash\";\nclass Movies extends Component {\n  state = {\n    movies: [],\n    pageSize: 4,\n    currentPage: 1,\n    genres: [],\n    searchQuery: \"\",\n    selectedGenre: null,\n    sortColumn: { path: \"title\", order: \"asc\" },\n  };\n\n  componentDidMount() {\n    const genres = [{ _id: \"\", name: \"All genres\" }, ...getGenres()];\n    this.setState({ movies: getMovies(), genres });\n  }\n  handleDelete = (movie) => {\n    const movies = this.state.movies.filter((mov) => mov._id !== movie._id);\n    //simply pass movies because the key and the value are the same\n    this.setState({ movies });\n  };\n\n  handleLike = (movie) => {\n    const movies = [...this.state.movies];\n    const index = movies.indexOf(movie);\n    movies[index].liked = !movies[index].liked;\n    this.setState({ movies });\n  };\n\n  handlePageChange = (page) => {\n    this.setState({ currentPage: page });\n  };\n\n  handleGenreSelect = (genre) => {\n    this.setState({ selectedGenre: genre, searchQuery: \"\", currentPage: 1 });\n  };\n\n  handleSort = (sortColumn) => {\n    this.setState({ sortColumn });\n  };\n\n  handleSearch = (query) => {\n    this.setState({ searchQuery: query, selectedGenre: null, currentPage: 1 });\n  };\n\n  getPagedData = () => {\n    const {\n      pageSize,\n      currentPage,\n      selectedGenre,\n      movies: allMovies,\n      sortColumn,\n    } = this.state;\n    const filtered = allMovies;\n\n    if (searchQuery)\n      filtere = allMovies.filter((m) =>\n        m.title.toLowerCase().startsWith(searchQuery.toLowerCase())\n      );\n    else if (selectedGenre && selectedGenre._id)\n      filtered = allMovies.filter((m) => m.genre._id === selectedGenre._id);\n\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n    const movies = paginate(sorted, currentPage, pageSize);\n    return { totalCount: filtered.length, data: movies };\n  };\n  render() {\n    const { length: count } = this.state.movies;\n    const { pageSize, currentPage, sortColumn } = this.state;\n    if (count === 0) return <p>There are no movies in the database.</p>;\n    const { totalCount, data: movies } = this.getPagedData();\n    return (\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <ListGroup\n            items={this.state.genres}\n            onItemSelect={this.handleGenreSelect}\n            selectedItem={this.state.selectedGenre}\n          />\n        </div>\n        <div className=\"col\">\n          <p> Showing {totalCount} movies in the database.</p>\n          <MoviesTable\n            movies={movies}\n            sortColumn={sortColumn}\n            onLike={this.handleLike}\n            onDelete={this.handleDelete}\n            onSort={this.handleSort}\n          />\n          <Pagination\n            itemsCount={totalCount}\n            pageSize={pageSize}\n            currentPage={currentPage}\n            onPageChange={this.handlePageChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}